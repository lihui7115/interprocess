# Boost Interprocess Library Example Jamfile

#  (C) Copyright Ion Gaztanaga 2006-2012.
# Use, modification and distribution are subject to the
# Boost Software License, Version 1.0. (See accompanying file
# LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Adapted from John Maddock's TR1 Jamfile.v2
# Copyright John Maddock 2005.
# Use, modification and distribution are subject to the
# Boost Software License, Version 1.0. (See accompanying file
# LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# this rule enumerates through all the sources and invokes
# the run rule for each source, the result is a list of all
# the run rules, which we can pass on to the test_suite rule:

rule test_all
{
   local all_rules = ;

   for local fileb in [ glob comp*.cpp ]
   {
      all_rules += [ link $(fileb)
      :  # additional args
        <toolset>acc:<linkflags>-lrt
        <toolset>acc-pa_risc:<linkflags>-lrt
        <toolset>gcc,<target-os>windows:<linkflags>"-lole32 -loleaut32 -lpsapi -ladvapi32"
        <target-os>hpux,<toolset>gcc:<linkflags>"-Wl,+as,mpas"
        <target-os>windows,<toolset>clang:<linkflags>"-lole32 -loleaut32 -lpsapi -ladvapi32"
        <target-os>linux:<linkflags>"-lrt"
      :  # test-files
      :  # requirements
      ] ;
   }

   for local fileb in [ glob doc_*.cpp ]
   {
      all_rules += [ run $(fileb)
      :  # additional args
      :  # test-files
      :  # requirements
        <toolset>acc:<linkflags>-lrt
        <toolset>acc-pa_risc:<linkflags>-lrt
        <toolset>gcc-mingw:<linkflags>"-lole32 -loleaut32 -lpsapi -ladvapi32"
        <target-os>hpux,<toolset>gcc:<linkflags>"-Wl,+as,mpas"
        <target-os>windows,<toolset>clang:<linkflags>"-lole32 -loleaut32 -lpsapi -ladvapi32"
        <target-os>linux:<linkflags>"-lrt"
      ] ;
   }

   return $(all_rules) ;
}

test-suite interprocess_example : [ test_all r ] : <threading>multi ;


# project
#     : requirements <library>../build//interprocess
#       <hardcode-dll-paths>true
#       <link>static
#     ;

# 注意看上面all_rules中的 [run] 与 [link]的区别

exe test01 : test01.cpp ;
exe test13_sync : test13_sync.cpp ;
exe test17_sync_wait_pred : test17_sync_wait_pred.cpp ;
exe test18_sync_notify_twice : test18_sync_notify_twice.cpp ;

# not working
# for local fileb in [ glob test*.cpp ]
# {
#   exe $(fileeb::-4) : $(fileb) ;
# }

# test01.cpp
# test02.cpp
# test03.cpp
# test04.cpp
# test05_managed.cpp
# test06_managed.cpp
# test07_managed.cpp
# test08_managed.cpp
# test09_managed.cpp
# test10_atomic_func.cpp
# test11_sync.cpp
# test12_sync.cpp
# test13_sync.cpp
# test14_sync_wait.cpp
# test15_sync_notify_one.cpp
# test16_sync_notify_all.cpp
# test17_sync_wait_pred.cpp
# test18_sync_notify_twice.cpp
